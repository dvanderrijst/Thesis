package Zhu;

import Main.Instance;

import java.util.HashMap;
import java.util.Map;

public class Individual {
    public int beta;
    public final int i;
    public final int r;
    public final int lifetime;
    private final Instance instance ;
    private final Map<Integer, Integer> tau = new HashMap<>();
    private final Map<Integer, Double> penaltyCosts = new HashMap<>();
    public int betaPrime = -1; //initial setting for when it is not configured yet.
    public static int[][] allBetas;

    /**
     * This is the constructor that initilizes:
     *
     * @param i        the individual index
     * @param r        the rth replacement for i
     * @param lifetime generated by the scenarios
     * @param instance
     */
    public Individual(int i, int r, int lifetime, Instance instance) {
        this.i = i;
        this.r = r;
        this.lifetime = lifetime;
        this.instance = instance;
    }

    public int getBetaPrime() {
        if(betaPrime == -1){
            return beta;
        }else {
            return betaPrime;
        }
    }

    public void setBetaPrime(int betaPrime) {
        this.betaPrime = betaPrime;
    }

    void setBeta(int bb) {
        this.beta = bb;
    }

    public int getBeta() {
        return beta;
    }

    public int i() {
        return i;
    }

    public int r() {
        return r;
    }

    public int lifetime() {
        return lifetime;
    }

    public void setTau(int m, int tau) {
//        System.out.println("for individual "+i+" we have set tau for m="+m+" to tau="+tau);
        this.tau.put(m, tau);
    }

    public int getTau(int m) {
        int tauValue ;
        if(tau.get(m)==null){
            tauValue = beta;
        }
        else{
            tauValue = tau.get(m);
        }
        return tauValue;
    }


    public void setPenaltyCosts(int m, int t) {
        //first find for which individuals the replacement time is now inside, then calculate the extra costs.
        int difference = beta - t;
        double costs = 0.0;
//        System.out.println("difference is "+difference);
        for (int r = this.r + 1; r < allBetas[0].length ; r++) {
            if(allBetas[i][r] > instance.T && allBetas[i][r] - difference <= instance.T){
                costs = costs + instance.cPR_i[(allBetas[i][r] - difference) % instance.N ]+ instance.d;
            }
        }
        penaltyCosts.put(m, costs);
    }

    public double getPenaltyCosts(int m){
        if(penaltyCosts.containsKey(m)){
            return penaltyCosts.get(m);
        }
        else {
            return 0.0;
        }
    }
    public void initializeAllBetas(int n, int q){
        allBetas = new int[n][q];
    }
    public void setAllBetas(int i, int r, int beta){
        allBetas[i][r] = beta;
    }
}
